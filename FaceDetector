#!/usr/bin/env python

import rospy
import actionlib
import cv2
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

class FaceDetector:
    def __init__(self):
        rospy.init_node('face_detector')

        # Initialize OpenCV
        self.cv_bridge = CvBridge()
        self.face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

        # Initialize MoveBase client
        self.move_base_client = actionlib.SimpleActionClient('move_base', MoveBaseAction)
        self.move_base_client.wait_for_server()

        # Subscribe to the Kinect's image topic
        self.image_subscriber = rospy.Subscriber('/kinect/image', Image, self.image_callback)

    def image_callback(self, image_msg):
        cv_image = self.cv_bridge.imgmsg_to_cv2(image_msg, desired_encoding="bgr8")

        # Detect faces
        faces = self.face_cascade.detectMultiScale(cv_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

        if len(faces) > 0:
            rospy.loginfo("Face detected. Cancelling MoveBase goal.")
            self.cancel_move_base_goal()

    def cancel_move_base_goal(self):
        # Create an empty MoveBaseGoal to send as a cancellation
        cancel_goal = MoveBaseGoal()

        # Send the cancel goal
        self.move_base_client.cancel_goal(cancel_goal)

if __name__ == '__main__':
    try:
        face_detector = FaceDetector()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
